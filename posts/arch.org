#+title: My journey into Arch and Hyprland
#+date: <2025-02-15 Sat>
#+PROPERTY: header-args:emacs-lisp
#+filetags: arch hyprland configuration
#+setupfile: ../org-templates/post.org

A few weeks ago, I was using KDE Manjaro when I came across a post on X about Arch Linux and Hyprland that caught my attention. The post featured a video (which I couldn't find again for reference) showcasing a specific configuration, and I was absolutely amazed by how clean and beautiful the system looked. At that moment, I decided to build my own configuration using Arch and Hyprland.

This journey was divided into several small chapters:

* Writing and Customizing Hyprland Configuration
I began by writing my configuration before actually using it. This approach gave me more control over what I was doing and what I could do next without breaking the system. I explored various dotfiles as examples, testing different solutions to determine what I wanted for my setup. Some of the most helpful dotfiles I referenced were:
- [[https://github.com/outragedline/dotfiles][Outragedline dotfiles]]
- [[https://github.com/SolDoesTech/hyprland][SolDoesTech dotfiles]]
These resources gave me a great understanding of how to organize my configuration. A special thanks to Outragedline, who became a friend and supported me throughout this process.
After researching the necessary packages, I compiled a collection to use:
- [[https://github.com/kovidgoyal/kitty][Kitty]]: A free and open source GPU accelerated terminal emulator written in C and Python.
- [[https://github.com/ClementTsang/bottom][Bottom]]: A customizable terminal-based system monitor inspired by htop, written in Rust.
- [[https://github.com/davatorium/rofi][Rofi]]: A window switcher and application launcher for creating menus, written in C.
- [[https://github.com/swaywm/swaylock][Swaylock]]: A screen locker for Wayland, written in C.
- [[https://github.com/Alexays/Waybar][Waybar]]: A customizable Wayland bar, written in C++.
- [[https://github.com/sxyazi/yazi][Yazi]]: A amazing terminal file manager, written in Rust.
 
This part of the setup was tedious because it involved writing and testing configurations. Rather than explaining every detail, I'll just share my [[https://github.com/math-almeida/dotfiles/tree/master/Desktop][configuration]] as a reference. 
 
* Create script for automatize instalation and future uses
Since the beginning of my dotfiles project, I created a Makefile and several helper scripts to simplify system installation. The same approach applied to my desktop configuration.
First, I created a [[https://github.com/math-almeida/dotfiles/blob/master/packages.yaml][packages.yaml]] file listing all the packages to install. This allows modifications in one place while reflecting changes across different installation steps. However, I faced a challenge: how to read YAML keys without adding heavy dependencies or complicated logic?
My solution was to use [[https://github.com/mikefarah/yq][yq]] to process the file and format the arguments for pacman or yay:
#+begin_src sh
@yq '.yay.hypr' packages.yaml | tr -d '[],"' | xargs yay -S --noconfirm
#+end_src
After installing the packages, I needed to symlink my latest configurations to the correct locations. For this, I used a [[https://github.com/math-almeida/dotfiles/blob/master/symlinks.rb][symlink]] script written in Ruby (thanks to vinibispo) to automate the process:
#+begin_src sh
cp symlinks.rb Desktop && cd Desktop && ruby symlinks.rb && rm symlinks.rb
#+end_src

* Installing Arch
First, I downloaded the ISO file from the Arch Linux website. Since I live in Brazil, I used the Unicamp mirror.
To create a bootable USB drive, I prepared it using Ventoy (thanks, Rick!). This fantastic open-source tool allows storing multiple ISO files while keeping the USB functional for regular file storage.

** Connecting to Wi-Fi in Arch Live Environment
After booting into the Arch ISO, I used =iwctl= (iNet Wireless Daemon) to connect to Wi-Fi:

1 - Identify the network device:
  #+begin_src sh
ip addr show
  #+end_src
 Mine is =wlan0=

2 - List available Wi-Fi networks:
   #+begin_src sh
iwctl station wlan0 get-networks
   #+end_src

3 - Connect to the network:
  #+begin_src sh
iwctl --passphrase "your-passphrase" station wlan0 connect your-wifi-network
  #+end_src
To verify the connection, run =ip addr show= again.

** Running the Arch Installer
I then used the =archinstall= script, which provides an easy interface for installation. For a minimal setup, I selected:

#+begin_src sh
{
    "additional-repositories": ["multilib"],
    "archinstall-language": "English",
    "audio_config": {"audio": "pipewire"},
    "bootloader": "Systemd-boot",
    "disk_config": {
        "config_type": "default_layout",
        "device_modifications": [{
            "device": "/dev/nvme0n1",
            "partitions": [
                {"fs_type": "fat32", "mountpoint": "/boot", "flags": ["boot", "esp"]},
                {"fs_type": "ext4", "mountpoint": "/"}
            ],
            "wipe": true
        }]
    },
    "hostname": "archlinux",
    "kernels": ["linux"],
    "locale_config": {"kb_layout": "us", "sys_lang": "en_US"},
    "mirror_config": {"mirror_regions": {"Brazil": [
        "http://mirrors.ic.unicamp.br/archlinux/$repo/os/$arch"
    ]}},
    "timezone": "America/Sao_Paulo"
}
#+end_src
After completing the installation, I rebooted:
#+begin_src sh
reboot
#+end_src

Upon reboot, the system prompted me for my login credentials. Once logged into the minimal Arch environment, I proceeded with my personal configuration setup.

** Finalizing the Setup
First, I connected to Wi-Fi using =nmcli=:
#+begin_src sh
nmcli device wifi connect your-wifi-network password your-password
#+end_src
Then, I installed =git= with:
#+begin_src sh
sudo pacman -S git --noconfirm
#+end_src
Next, I cloned my dotfiles repository:
#+begin_src sh
git clone https://github.com/math-almeida/dotfiles.git
#+end_src
Inside the repository, I ran my Makefile script:
#+begin_src sh
cd dotfiles
make build
#+end_src
This script installed and configured the rest of my system. Finally, I started Hyprland:
#+begin_src sh
hyprland
#+end_src
And thatâ€™s it! My Arch Linux + Hyprland setup was complete!
